# -*- coding: utf-8 -*-
"""100DC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kOvOWeNVuaPjPW_4iZTHXoMAJJcuAmfG
"""

from google.colab import drive
drive.mount('/content/drive')

#Load the required libraries
import pandas as pd
import numpy as np
import seaborn as sns

#Load the data
df = pd.read_csv('/content/drive/MyDrive/CSV Files/titanic.csv')

#View the data
df.head()

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Basic information about the DataFrame
print("Basic information about the DataFrame:")
print(df.info())

# Describe the data in the DataFrame
print("\nDescriptive statistics of the DataFrame:")
print(df.describe())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Find and count duplicate rows
num_duplicates = df.duplicated().sum()

# Print the number of duplicate rows
print("Number of duplicate rows:", num_duplicates)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Get unique values from the 'Pclass' column
unique_pclass = df['Pclass'].unique()
print("Unique values in 'Pclass' column:", unique_pclass)

# Get unique values from the 'Survived' column
unique_survived = df['Survived'].unique()
print("Unique values in 'Survived' column:", unique_survived)

# Get unique values from the 'Sex' column
unique_sex = df['Sex'].unique()
print("Unique values in 'Sex' column:", unique_sex)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Find and count null values in each column
null_counts = df.isnull().sum()

# Print the null counts for each column
print("Null counts for each column:")
print(null_counts)

import pandas as pd
import numpy as np

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Replace null values with '0'
df.replace(np.nan, '0', inplace=True)

# Check for null values after replacement
null_counts_after_replace = df.isnull().sum()

# Print the null counts for each column after replacement
print("Null counts for each column after replacement:")
print(null_counts_after_replace)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Display the data types of each column
print("Data types of each column:")
print(df.dtypes)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Filter the data to select rows where 'Pclass' equals 1
filtered_data = df[df['Pclass'] == 1]

# Display the first few rows of the filtered DataFrame
print("Filtered data where 'Pclass' equals 1:")
print(filtered_data.head())

import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Create a boxplot for the 'Fare' column
plt.figure(figsize=(8, 6))
plt.boxplot(df['Fare'])
plt.title('Boxplot of Fare')
plt.ylabel('Fare')
plt.show()

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Compute the correlation matrix
correlation_matrix = df.corr()

# Display the correlation matrix
print("Correlation matrix:")
print(correlation_matrix)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/titanic.csv")

# Compute the correlation matrix
correlation_matrix = df.corr()

# Create a heatmap for the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Plot')
plt.show()

data = pd.read_csv("/content/drive/MyDrive/CSV Files/student_scores - student_scores.csv")
print(data.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/student_scores - student_scores.csv")

# Print the shape of the DataFrame
print("Shape of the DataFrame (rows, columns):", df.shape)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/student_scores - student_scores.csv")

# Display information about the DataFrame
print("Information about the DataFrame:")
print(df.info())

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/student_scores - student_scores.csv")

# Check for null values in each column
null_counts = data.isna().sum()

# Print the sum of null values for each column
print("Sum of null values for each column:")
print(null_counts)

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/student_scores - student_scores.csv")

# Drop duplicate rows
data.drop_duplicates(inplace=True)

# Check if duplicates are dropped
print("Duplicates dropped. New shape of data:", data.shape)

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/student_scores - student_scores.csv")

# Display descriptive statistics of the DataFrame
print("Descriptive statistics of the DataFrame:")
print(data.describe())

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/student_scores - student_scores.csv")

# Drop rows with missing values
data.dropna(inplace=True)

# Check the new shape of the DataFrame
print("Shape of the DataFrame after dropping rows with missing values:", data.shape)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/student_scores - student_scores.csv")

# Create a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(data["Hours"], data["Scores"])
plt.title('Scatter Plot of Scores vs Hours')
plt.xlabel('Hours Studied')
plt.ylabel('Scores')
plt.grid(True)
plt.show()

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/student_scores - student_scores.csv")

# Reshape the "Hours" and "Scores" columns
x = data["Hours"].values.reshape(-1, 1)
y = data['Scores'].values.reshape(-1, 1)

# Print the first few elements of the reshaped arrays
print("First few elements of x (Hours):", x[:5])
print("First few elements of y (Scores):", y[:5])

data = pd.read_csv('/content/drive/MyDrive/CSV Files/winequality-red.csv')

print(data.head())

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Print the last few rows of the DataFrame
print("Last few rows of the DataFrame:")
print(data.tail())

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Display descriptive statistics of the DataFrame
print("Descriptive statistics of the DataFrame:")
print(data.describe())

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Count the number of missing values in each column
missing_values = data.isnull().sum()

# Print the number of missing values in each column
print("Number of missing values in each column:")
print(missing_values)

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Select features and target
X = data[['fixed acidity', 'volatile acidity', 'alcohol']].values
y = data['quality'].values

# Print the first few elements of X and y
print("First few elements of X:")
print(X[:5])
print("\nFirst few elements of y:")
print(y[:5])

import pandas as pd
from sklearn.model_selection import train_test_split

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Select features and target
X = data[['fixed acidity', 'volatile acidity', 'alcohol']].values
y = data['quality'].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Print the shapes of the training and testing sets
print("Shape of X_train:", X_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_test:", y_test.shape)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Select features and target
X = data[['fixed acidity', 'volatile acidity', 'alcohol']].values
y = data['quality'].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create a linear regression model
regressor = LinearRegression()

# Fit the model to the training data
regressor.fit(X_train, y_train)

# Print the coefficients and intercept of the model
print("Coefficients:", regressor.coef_)
print("Intercept:", regressor.intercept_)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Select features and target
X = data[['fixed acidity', 'volatile acidity', 'alcohol']].values
y = data['quality'].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create a linear regression model
regressor = LinearRegression()

# Fit the model to the training data
regressor.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = regressor.predict(X_test)

# Create a DataFrame to compare actual and predicted values
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

# Select the first 10 rows for visualization
df1 = df.head(10)

# Print the DataFrame
print(df1)

import pandas as pd
import matplotlib.pyplot as plt

# Create a bar plot
plt.figure(figsize=(16, 10))
df1.plot(kind='bar', figsize=(16, 10))
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Select features and target
X = data[['fixed acidity', 'volatile acidity', 'alcohol']].values
y = data['quality'].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create a linear regression model
regressor = LinearRegression()

# Fit the model to the training data
regressor.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = regressor.predict(X_test)

# Calculate and print Mean Absolute Error (MAE)
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))

# Calculate and print Mean Squared Error (MSE)
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Select features and target
X = data[['fixed acidity', 'volatile acidity', 'alcohol']].values
y = data['quality'].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create a linear regression model
regressor = LinearRegression()

# Fit the model to the training data
regressor.fit(X_train, y_train)

# Get coefficients and intercept
coefficients = regressor.coef_
intercept = regressor.intercept_

# Print coefficients and intercept
print("Coefficients:", coefficients)
print("Intercept:", intercept)

data = pd.read_csv('/content/drive/MyDrive/CSV Files/weather.csv')

print(data.head())

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Get the size of the DataFrame
df_size = data.size

# Print the size of the DataFrame
print("Size of the DataFrame:", df_size)

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Get the shape of the DataFrame
df_shape = data.shape

# Print the shape of the DataFrame
print("Shape of the DataFrame (rows, columns):", df_shape)

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Get the column labels of the DataFrame
df_columns = data.columns

# Print the column labels of the DataFrame
print("Column labels of the DataFrame:")
print(df_columns)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Plot the frequency of wind directions at 3 PM
plt.figure(figsize=(10, 6))
data['WindDir3pm'].value_counts().plot(kind="bar", color='orange')
plt.title("Wind Direction at 3 PM")
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.xlabel("Wind Direction")
plt.ylabel("Frequency")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Plot the frequency of wind directions at 9 AM
plt.figure(figsize=(10, 6))
data['WindDir9am'].value_counts().plot(kind="bar", color='orange')
plt.title("Wind Direction at 9 AM")
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.xlabel("Wind Direction")
plt.ylabel("Frequency")
plt.show()

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Convert 'RainToday' values to binary (1 for "Yes", 0 for "No")
data['RainToday'] = data['RainToday'].apply(lambda x: 1 if x == "Yes" else 0)

# Display the first few rows of the DataFrame to verify the changes
print(data.head())

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Convert 'RainTomorrow' values to binary (1 for "Yes", 0 for "No")
data['RainTomorrow'] = data['RainTomorrow'].apply(lambda x: 1 if x == "Yes" else 0)

# Display the first few rows of the DataFrame to verify the changes
print(data.head())

import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Display the first few rows of the DataFrame
print(data.head())

import pandas as pd
import matplotlib.pyplot as plt

# Load the data from the CSV file
data = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Plot the frequency of wind gust directions
plt.figure(figsize=(10, 6))
data['WindGustDir'].value_counts().plot(kind="bar", color='orange')
plt.title("Wind Gust Direction")
plt.xlabel("Wind Direction")
plt.ylabel("Frequency")
plt.show()

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Initialize LabelEncoder
le = LabelEncoder()

# Drop rows with missing values
df = df.dropna()

# Display the first few rows of the DataFrame
print(df.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Display the shape of the DataFrame
print("Shape of the DataFrame (rows, columns):", df.shape)

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Initialize LabelEncoder
le = LabelEncoder()

# Transform categorical features into numerical values
df['WindGustDir'] = le.fit_transform(df['WindGustDir'])
df['WindDir3pm'] = le.fit_transform(df['WindDir3pm'])
df['WindDir9am'] = le.fit_transform(df['WindDir9am'])

# Display the first few rows of the DataFrame to verify the changes
print(df.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Display descriptive statistics of the DataFrame
print(df.describe())

from sklearn.model_selection import train_test_split
import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Split the data into features (x) and target variable (y)
x = df.drop(['RainTomorrow'], axis=1)
y = df['RainTomorrow']

# Print the shapes of x and y to verify the split
print("Shape of features (x):", x.shape)
print("Shape of target variable (y):", y.shape)

from sklearn.model_selection import train_test_split
import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Split the data into features (x) and target variable (y)
x = df.drop(['RainTomorrow'], axis=1)
y = df['RainTomorrow']

# Split the data into training and testing sets
train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.2, random_state=42)

# Print the shape of the training features
print("Shape of the training features (train_x):", train_x.shape)

from sklearn.model_selection import train_test_split
import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/weather.csv")

# Split the data into features (x) and target variable (y)
x = df.drop(['RainTomorrow'], axis=1)
y = df['RainTomorrow']

# Split the data into training and testing sets
train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.2, random_state=42)

# Print the shape of the training target variable
print("Shape of the training target variable (train_y):", train_y.shape)

import pandas as pd
data = pd.read_csv('/content/drive/MyDrive/CSV Files/Iris.csv')

print(data.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Iris.csv")

# Display the first few rows of the DataFrame
print(df.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Iris.csv")

print(df.info())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Iris.csv")

# Display the dimensions of the DataFrame
print("Shape of the DataFrame (rows, columns):", df.shape)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Iris.csv")

# Calculate the number of missing values for each column
missing_values = df.isnull().sum()

# Display the number of missing values for each column
print("Number of missing values for each column:")
print(missing_values)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Iris.csv")

# Display the summary statistics of the DataFrame
print(df.describe())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/car_evaluation.csv")

print(df.info())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/car_evaluation.csv")

# Display the dimensions of the DataFrame
print("Shape of the DataFrame (rows, columns):", df.shape)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/car_evaluation.csv")

# Define the new column names
col_names = ['paint', 'break', 'alloy', 'wheel', 'headlight', 'gear', 'engine']

# Assign the new column names to the DataFrame
df.columns = col_names

# Print the new column names
print(col_names)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/car_evaluation.csv")

# Define the new column names
col_names = ['paint', 'break', 'alloy', 'wheel', 'headlight', 'gear', 'engine']

# Assign the new column names to the DataFrame
df.columns = col_names

# Display the first few rows of the DataFrame
print(df.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/car_evaluation.csv")

# Define the new column names
col_names = ['paint', 'break', 'alloy', 'wheel', 'headlight', 'gear', 'engine']

# Assign the new column names to the DataFrame
df.columns = col_names

# Display information about the DataFrame
print(df.info())

import pandas as pd
data = pd.read_csv('/content/drive/MyDrive/CSV Files/winequality-red.csv')

print(data.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Check for missing values in each column
missing_values = df.isnull().sum()

# Print the number of missing values for each column
print("Number of missing values for each column:")
print(missing_values)

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Count the occurrences of each unique value in the 'quality' column
quality_counts = df['quality'].value_counts()

# Print the counts of each unique value
print(quality_counts)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Create a count plot of the 'quality' column
sns.countplot(x='quality', data=df)

# Display the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Create a box plot of 'alcohol' vs. 'quality'
sns.boxplot(x='quality', y='alcohol', data=df)

# Display the plot
plt.show()

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Define independent variables (features) and target variable
X = df.drop('quality', axis=1)  # Independent variables
y = df['quality']               # Target variable

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Define independent variables (features) and target variable
X = df.drop('quality', axis=1)  # Independent variables
y = df['quality']               # Target variable

# Display the first few rows of the DataFrame
print(df.head())

from sklearn.model_selection import train_test_split
import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Define independent variables (features) and target variable
X = df.drop('quality', axis=1)  # Independent variables
y = df['quality']               # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

from sklearn.model_selection import train_test_split
import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Define independent variables (features) and target variable
X = df.drop('quality', axis=1)  # Independent variables
y = df['quality']               # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Retrieve the shapes of the training and testing sets
print("Shape of X_train:", X_train.shape)
print("Shape of X_test:", X_test.shape)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Define independent variables (features) and target variable
X = df.drop('quality', axis=1)  # Independent variables
y = df['quality']               # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Initialize and train the Random Forest classifier model
model = RandomForestClassifier(n_estimators=100)
model.fit(X_train, y_train)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Define independent variables (features) and target variable
X = df.drop('quality', axis=1)  # Independent variables
y = df['quality']               # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Initialize and train the Random Forest classifier model
model = RandomForestClassifier(n_estimators=100)
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Print the predicted values
print(y_pred)

from sklearn import metrics

# Calculate and print the accuracy score
accuracy = metrics.accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Define independent variables (features) and target variable
X = df.drop('quality', axis=1)  # Independent variables
y = df['quality']               # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Define the parameter grid to search
param_grid = {
    'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10]
}

# Initialize the Random Forest classifier
rf = RandomForestClassifier()

# Initialize GridSearchCV
grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5)

# Fit GridSearchCV to the training data
grid_search.fit(X_train, y_train)

# Print the best parameters found
print("Best parameters:", grid_search.best_params_)

# Print the best score found
print("Best score:", grid_search.best_score_)

# Get the best model
best_model = grid_search.best_estimator_

# Make predictions on the testing set using the best model
y_pred = best_model.predict(X_test)

# Evaluate the model
accuracy = metrics.accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

from pprint import pprint
from sklearn.ensemble import RandomForestClassifier

# Initialize a RandomForestClassifier
rf = RandomForestClassifier()

# Print the current parameters of the RandomForestClassifier
print('Parameters currently in use:\n')
pprint(rf.get_params())

import numpy as np

# Define the evaluate function
def evaluate(model, X_test, y_test):
    # Make predictions on the testing set
    predictions = model.predict(X_test)

    # Calculate absolute errors
    errors = abs(predictions - y_test)

    # Calculate mean absolute percentage error (MAPE)
    mape = 100 * np.mean(errors / y_test)

    # Calculate accuracy
    accuracy = 100 - mape

    # Print model performance metrics
    print('Model Performance')
    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))
    print('Accuracy = {:0.2f}%.'.format(accuracy))

    return accuracy

# Define parameter grid
param_grid = {
    'bootstrap': [True],
    'max_depth': [8, 10, 12, 14],
    'max_features': [2, 3],
    'min_samples_leaf': [3, 4, 5],
    'min_samples_split': [8, 10, 12],
    'n_estimators': [100, 200, 300, 1000]
}

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV

# Create a base model
rf = RandomForestClassifier()

# Instantiate the grid search model
grid_search = GridSearchCV(estimator=rf, param_grid=param_grid,
                           cv=3, n_jobs=-1, verbose=2)

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np

# Define parameter grid
param_grid = {
    'bootstrap': [True],
    'max_depth': [8, 10, 12, 14],
    'max_features': [2, 3],
    'min_samples_leaf': [3, 4, 5],
    'min_samples_split': [8, 10, 12],
    'n_estimators': [100, 200, 300, 1000]
}

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/winequality-red.csv")

# Define independent variables (features) and target variable
X = df.drop('quality', axis=1)  # Independent variables
y = df['quality']               # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Create a base model
rf = RandomForestClassifier()

# Instantiate the grid search model
grid_search = GridSearchCV(estimator=rf, param_grid=param_grid,
                           cv=3, n_jobs=-1, verbose=2)

# Fit grid search to data
grid_search.fit(X_train, y_train)

# Get the best parameters found by grid search
best_grid = grid_search.best_estimator_

# Model evaluation with the best estimator from grid search
def evaluate(model, X_test, y_test):
    predictions = model.predict(X_test)
    errors = abs(predictions - y_test)
    mape = 100 * np.mean(errors / y_test)
    accuracy = 100 - mape
    print('Model Performance')
    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))
    print('Accuracy = {:0.2f}%.'.format(accuracy))
    return accuracy

grid_accuracy = evaluate(best_grid, X_test, y_test)

from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import VotingClassifier
from sklearn.metrics import accuracy_score

# Generating some sample data
X, y = make_classification(n_samples=1000, n_features=20, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initializing models
model1 = LogisticRegression()
model2 = DecisionTreeClassifier()
model3 = SVC(probability=True)

# Max Voting classifier
model = VotingClassifier(estimators=[('lr', model1), ('dt', model2), ('svc', model3)], voting='hard')

# Training model
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Calculating accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Max Voting Accuracy:", accuracy)

from sklearn.ensemble import VotingClassifier
from sklearn.metrics import accuracy_score

# Averaging classifier
model = VotingClassifier(estimators=[('lr', model1), ('dt', model2), ('svc', model3)], voting='soft')

# Train model
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Calculating accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Averaging Accuracy:", accuracy)

from sklearn.ensemble import VotingClassifier
from sklearn.metrics import accuracy_score

# Averaging classifier
model = VotingClassifier(estimators=[('lr', model1), ('dt', model2), ('svc', model3)], voting='soft')

# Train model
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

# Calculating accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Averaging Accuracy:", accuracy)

import pandas as pd
data = pd.read_csv('/content/drive/MyDrive/CSV Files/heart.csv')

print(data.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Display the dimensions of the DataFrame
print("Shape of the DataFrame (rows, columns):", df.shape)

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Display descriptive statistics
description = df.describe()
print(description)

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Calculate the number of unique values for each column
for column in df.columns:
    distinct_values = len(df[column].unique())
    print(f"{column}: {distinct_values} distinct values")

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Find duplicate rows
duplicate_data = df[df.duplicated()]

# Print the number of duplicate rows and the duplicate rows themselves
print("No. of Duplicate Rows:", len(duplicate_data))
print("Duplicate Rows:")
print(duplicate_data)

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Plot histogram
plt.hist(df['age'], bins=10, color='skyblue', edgecolor='black')
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Count the occurrences of each sex
sex_count = df['sex'].value_counts()

# Plot pie chart
plt.pie(sex_count, labels=sex_count.index, autopct='%1.1f%%')
plt.title('Sex Distribution')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Set the size of the figure
plt.figure(figsize=(8, 5))

# Create the count plot
sns.countplot(x='cp', data=df)

# Add title and labels
plt.title('Distribution of Chest Pain Types')
plt.xlabel('Chest Pain Type')
plt.ylabel('Count')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the box plot
plt.boxplot(df['trtbps'])

# Add title and labels
plt.title('Resting Blood Pressure Distribution')
plt.ylabel('Resting Blood Pressure (mm Hg)')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the histogram
plt.hist(df['chol'], bins=10, edgecolor='black')

# Add title and labels
plt.title('Cholesterol Distribution of Patients')
plt.xlabel('Cholesterol')
plt.ylabel('Frequency')

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Set the size of the figure
plt.figure(figsize=(8, 5))

# Create the count plot
sns.countplot(x='exng', data=df)

# Add title and labels
plt.title('Distribution of Exercise-Induced Angina (exng)')
plt.xlabel('Exercise-Induced Angina (0 = No, 1 = Yes)')
plt.ylabel('Count')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Count the occurrences of each target value
target_count = df['output'].value_counts()

# Plot pie chart
plt.pie(target_count, labels=target_count.index, autopct='%1.1f%%')
plt.title('Target Distribution')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Set the size of the figure
plt.figure(figsize=(8, 5))

# Create the count plot
sns.countplot(x='fbs', data=df)

# Add title and labels
plt.title('Distribution of Fasting Blood Sugar (fbs)')
plt.xlabel('Fasting Blood Sugar (0 = Normal, 1 = High)')
plt.ylabel('Count')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the histogram
plt.hist(df['thalachh'], bins=10, edgecolor='black')

# Add title and labels
plt.title('Maximum Heart Rate Achieved Distribution')
plt.xlabel('Maximum Heart Rate Achieved')
plt.ylabel('Frequency')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the scatter plot
plt.scatter(df['age'], df['thalachh'], color='orange')

# Add title and labels
plt.title('Age vs Maximum Heart Rate Achieved')
plt.xlabel('Age')
plt.ylabel('Maximum Heart Rate Achieved')

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the box plot
sns.boxplot(x='sex', y='trtbps', data=df)

# Add title and labels
plt.title('Resting Blood Pressure for Different Sex')
plt.xlabel('Sex')
plt.ylabel('Resting Blood Pressure')

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the box plot
sns.boxplot(x='sex', y='chol', data=df, palette='deep')

# Add title and labels
plt.title('Cholesterol for Different Sex')
plt.xlabel('Sex')
plt.ylabel('Cholesterol')

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the box plot
sns.boxplot(x='cp', y='thalachh', data=df, palette='husl')

# Add title and labels
plt.title('Maximum Heart Rate achieved for Different Chest Pain Types')
plt.xlabel('Chest Pain Type')
plt.ylabel('Maximum Heart Rate achieved')
plt.xticks(ticks=[0,1,2,3], labels=['typical angina', 'atypical angina', 'non-anginal pain', 'asymptomatic'])

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the box plot
sns.boxplot(x='cp', y='chol', data=df, palette='deep')

# Add title and labels
plt.title('Cholesterol Levels for Different Chest Pain Types')
plt.xlabel('Chest Pain Type')
plt.ylabel('Cholesterol Level')
plt.xticks(ticks=[0,1,2,3], labels=['typical angina', 'atypical angina', 'non-anginal pain', 'asymptomatic'])

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the box plot
sns.boxplot(x='fbs', y='chol', data=df, palette='dark')

# Add title and labels
plt.title('Cholesterol Levels for Patients with and without Fasting Blood Sugar > 120 mg/dl')
plt.xlabel('Fasting Blood Sugar > 120 mg/dl (1 = True; 0 = False)')
plt.ylabel('Cholesterol Level')

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Group by 'restecg' and 'output', then calculate the size of each group
restecg_target = df.groupby(['restecg', 'output']).size().unstack().fillna(0)

# Plot the stacked bar plot
restecg_target.plot(kind='bar', stacked=True)

# Add title and labels
plt.title('Resting ECG Results vs Target')
plt.xlabel('Rest ECG Results')
plt.ylabel('Number of Patients')
plt.xticks(ticks=[0,1,2], labels=['Normal', 'ST-T Wave Abnormality', 'Left Hypertrophy'], rotation=0)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Group by 'sex' and 'output', then calculate the size of each group
sex_target = df.groupby(['sex', 'output']).size().unstack().fillna(0)

# Plot the stacked bar plot
sex_target.plot(kind='bar', stacked=True)

# Add title and labels
plt.title('Sex vs Target')
plt.xlabel('Sex')
plt.ylabel('Number of Patients')
plt.xticks(rotation=0)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Group by 'fbs' and 'output', then calculate the size of each group
fbs_target = df.groupby(['fbs', 'output']).size().unstack().fillna(0)

# Plot the stacked bar plot
fbs_target.plot(kind='bar', stacked=True)

# Add title and labels
plt.title('Fasting Blood Sugar > 120 mg/dl vs Target')
plt.xlabel('Fasting Blood Sugar > 120 mg/dl (1 = True; 0 = False)')
plt.ylabel('Number of Patients')
plt.xticks(rotation=0)

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the box plot
sns.boxplot(x='cp', y='trtbps', data=df, palette='husl')

# Add title and labels
plt.title('Resting Blood Pressure for Different Chest Pain Types')
plt.xlabel('Chest Pain Type')
plt.ylabel('Resting Blood Pressure')
plt.xticks(ticks=[0,1,2,3], labels=['Typical Angina', 'Atypical Angina', 'Non-Anginal Pain', 'Asymptomatic'])

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the scatter plot
sns.scatterplot(x='age', y='chol', hue='output', data=df)

# Add title and labels
plt.title('Age vs Cholesterol Level')
plt.xlabel('Age')
plt.ylabel('Cholesterol Level')

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the scatter plot
sns.scatterplot(x='age', y='trtbps', hue='output', data=df)

# Add title and labels
plt.title('Age vs Resting Blood Pressure')
plt.xlabel('Age')
plt.ylabel('Resting Blood Pressure')

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the scatter plot
sns.scatterplot(x='thalachh', y='age', hue='output', data=df)

# Add title and labels
plt.title('Maximum Heart Rate Achieved vs Age')
plt.xlabel('Maximum Heart Rate Achieved')
plt.ylabel('Age')

# Show the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Create the scatter plot
sns.scatterplot(x='trtbps', y='thalachh', hue='output', data=df)

# Add title and labels
plt.title('Resting Blood Pressure vs Maximum Heart Rate Achieved')
plt.xlabel('Resting Blood Pressure')
plt.ylabel('Maximum Heart Rate Achieved')

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Define categorical columns and numerical columns
categorical_columns = ['sex','cp','restecg','slp','thall']
numerical_columns = ['age','trtbps','chol','fbs','thalachh','exng','oldpeak','caa','output']

# Create dummy variables for categorical columns
dummy_variables = pd.get_dummies(df, columns=categorical_columns, drop_first=False)

# Display the resulting DataFrame with dummy variables
print(dummy_variables)

import pandas as pd
from sklearn.preprocessing import StandardScaler

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Define numerical columns
numerical_columns = ['age', 'trtbps', 'chol', 'fbs', 'thalachh', 'exng', 'oldpeak', 'caa', 'output']

# Initialize StandardScaler
scaler = StandardScaler()

# Scale the numerical columns
scaled_numerical = scaler.fit_transform(df[numerical_columns])

# Convert the scaled numerical columns into a DataFrame
scaled_numerical_df = pd.DataFrame(scaled_numerical, columns=numerical_columns)

# Display the resulting DataFrame with scaled numerical columns
print(scaled_numerical_df)

import pandas as pd
from sklearn.preprocessing import StandardScaler

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/heart.csv")

# Define categorical columns and numerical columns
categorical_columns = ['sex', 'cp', 'restecg', 'slp', 'thall']
numerical_columns = ['age', 'trtbps', 'chol', 'fbs', 'thalachh', 'exng', 'oldpeak', 'caa', 'output']

# Initialize StandardScaler
scaler = StandardScaler()

# Scale the numerical columns
scaled_numerical = scaler.fit_transform(df[numerical_columns])

# Convert the scaled numerical columns into a DataFrame
scaled_numerical_df = pd.DataFrame(scaled_numerical, columns=numerical_columns)

# Create dummy variables for categorical columns
dummy_variables = pd.get_dummies(df, columns=categorical_columns, drop_first=False)

# Drop the original numerical columns
dummy_variables = dummy_variables.drop(numerical_columns, axis=1)

# Concatenate the dummy variables and scaled numerical columns
processed_df = pd.concat([dummy_variables, scaled_numerical_df], axis=1)

# Display the processed DataFrame
print(processed_df)

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the first few rows of the DataFrame
print(df.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the dimensions of the DataFrame
print("Shape of the DataFrame (rows, columns):", df.shape)

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the counts of unique values in the 'Loan_ID' column
loan_id_counts = df['Loan_ID'].value_counts(dropna=False)
print("Counts of unique values in the 'Loan_ID' column:")
print(loan_id_counts)

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the counts of unique values in the 'Gender' column
gender_counts = df['Gender'].value_counts(dropna=False)
print("Counts of unique values in the 'Gender' column:")
print(gender_counts)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the count plot
sns.countplot(x="Gender", data=df, palette="dark")

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Count the number of male applicants
count_male = len(df[df['Gender'] == 'Male'])

# Count the number of female applicants
count_female = len(df[df['Gender'] == 'Female'])

# Count the number of missing values
count_null = len(df[df['Gender'].isnull()])

# Calculate the percentages
total_applicants = len(df['Gender'])
percentage_male = (count_male / total_applicants) * 100
percentage_female = (count_female / total_applicants) * 100
percentage_null = (count_null / total_applicants) * 100

# Print the results
print("Male applicant Percentage: {:.2f}%".format(percentage_male))
print("Female applicant Percentage: {:.2f}%".format(percentage_female))
print("Missing values percentage: {:.2f}%".format(percentage_null))

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the counts of unique values in the 'Married' column
married_counts = df['Married'].value_counts(dropna=False)
print("Counts of unique values in the 'Married' column:")
print(married_counts)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the count plot
sns.countplot(x="Married", data=df, palette="Paired")

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Calculate counts
countMarried = len(df[df['Married'] == 'Yes'])
countNotMarried = len(df[df['Married'] == 'No'])
countNull = len(df[df['Married'].isnull()])

# Calculate percentages
total_records = len(df['Married'])
married_percentage = (countMarried / total_records) * 100
not_married_percentage = (countNotMarried / total_records) * 100
missing_percentage = (countNull / total_records) * 100

# Print the results
print("Married Percentage: {:.2f}%".format(married_percentage))
print("Not married applicant Percentage: {:.2f}%".format(not_married_percentage))
print("Missing values percentage: {:.2f}%".format(missing_percentage))

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the counts of unique values in the 'Education' column
education_counts = df['Education'].value_counts(dropna=False)
print("Counts of unique values in the 'Education' column:")
print(education_counts)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the count plot
sns.countplot(x="Education", data=df, palette="rocket")

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Calculate counts
countGraduate = len(df[df['Education'] == 'Graduate'])
countNotGraduate = len(df[df['Education'] == 'Not Graduate'])
countNull = len(df[df['Education'].isnull()])

# Calculate percentages
total_records = len(df['Education'])
graduate_percentage = (countGraduate / total_records) * 100
not_graduate_percentage = (countNotGraduate / total_records) * 100
missing_percentage = (countNull / total_records) * 100

# Print the results
print("Graduate applicant Percentage: {:.2f}%".format(graduate_percentage))
print("Not graduate applicant Percentage: {:.2f}%".format(not_graduate_percentage))
print("Missing values percentage: {:.2f}%".format(missing_percentage))

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the counts of unique values in the 'Self_Employed' column
self_employed_counts = df['Self_Employed'].value_counts(dropna=False)
print("Counts of unique values in the 'Self_Employed' column:")
print(self_employed_counts)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the count plot
sns.countplot(x="Self_Employed", data=df, palette="crest")

# Add title and labels
plt.title("Count of Self Employed")
plt.xlabel("Self Employed")
plt.ylabel("Count")

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Calculate counts
countNo = len(df[df['Self_Employed'] == 'No'])
countYes = len(df[df['Self_Employed'] == 'Yes'])
countNull = len(df[df['Self_Employed'].isnull()])

# Calculate percentages
total_records = len(df['Self_Employed'])
not_self_employed_percentage = (countNo / total_records) * 100
self_employed_percentage = (countYes / total_records) * 100
missing_percentage = (countNull / total_records) * 100

# Print the results
print("Not self-employed Percentage: {:.2f}%".format(not_self_employed_percentage))
print("Self-employed Percentage: {:.2f}%".format(self_employed_percentage))
print("Missing values percentage: {:.2f}%".format(missing_percentage))

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the counts of unique values in the 'Credit_History' column
credit_history_counts = df['Credit_History'].value_counts(dropna=False)
print("Counts of unique values in the 'Credit_History' column:")
print(credit_history_counts)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the count plot
sns.countplot(x="Credit_History", data=df, palette="viridis")

# Add title and labels
plt.title("Count of Credit History")
plt.xlabel("Credit History")
plt.ylabel("Count")

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Calculate counts
count1 = len(df[df['Credit_History'] == 1])
count0 = len(df[df['Credit_History'] == 0])
countNull = len(df[df['Credit_History'].isnull()])

# Calculate percentages
total_records = len(df['Credit_History'])
good_credit_percentage = (count1 / total_records) * 100
bad_credit_percentage = (count0 / total_records) * 100
missing_percentage = (countNull / total_records) * 100

# Print the results
print("Percentage of Good credit history: {:.2f}%".format(good_credit_percentage))
print("Percentage of Bad credit history: {:.2f}%".format(bad_credit_percentage))
print("Missing values percentage: {:.2f}%".format(missing_percentage))

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the counts of unique values in the 'Property_Area' column
property_area_counts = df['Property_Area'].value_counts(dropna=False)
print("Counts of unique values in the 'Property_Area' column:")
print(property_area_counts)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the count plot
sns.countplot(x="Property_Area", data=df, palette="cubehelix")

# Add title and labels
plt.title("Count of Property Area")
plt.xlabel("Property Area")
plt.ylabel("Count")

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Calculate counts
countUrban = len(df[df['Property_Area'] == 'Urban'])
countRural = len(df[df['Property_Area'] == 'Rural'])
countSemiurban = len(df[df['Property_Area'] == 'Semiurban'])
countNull = len(df[df['Property_Area'].isnull()])

# Calculate percentages
total_records = len(df['Property_Area'])
urban_percentage = (countUrban / total_records) * 100
rural_percentage = (countRural / total_records) * 100
semiurban_percentage = (countSemiurban / total_records) * 100
missing_percentage = (countNull / total_records) * 100

# Print the results
print("Urban Percentage: {:.2f}%".format(urban_percentage))
print("Rural Percentage: {:.2f}%".format(rural_percentage))
print("Semiurban Percentage: {:.2f}%".format(semiurban_percentage))
print("Missing values percentage: {:.2f}%".format(missing_percentage))

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display the counts of unique values in the 'Loan_Status' column
loan_status_counts = df['Loan_Status'].value_counts(dropna=False)
print("Counts of unique values in the 'Loan_Status' column:")
print(loan_status_counts)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the count plot
sns.countplot(x="Loan_Status", data=df, palette="YlOrBr")

# Add title and labels
plt.title("Count of Loan Status")
plt.xlabel("Loan Status")
plt.ylabel("Count")

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Calculate counts
countY = len(df[df['Loan_Status'] == 'Y'])
countN = len(df[df['Loan_Status'] == 'N'])
countNull = len(df[df['Loan_Status'].isnull()])

# Calculate percentages
total_records = len(df['Loan_Status'])
approved_percentage = (countY / total_records) * 100
rejected_percentage = (countN / total_records) * 100
missing_percentage = (countNull / total_records) * 100

# Print the results
print("Percentage of Approved: {:.2f}%".format(approved_percentage))
print("Percentage of Rejected: {:.2f}%".format(rejected_percentage))
print("Missing values percentage: {:.2f}%".format(missing_percentage))

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Display descriptive statistics for specified columns
statistics = df[['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount']].describe()

# Print the descriptive statistics
print(statistics)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Set the style
sns.set(style="darkgrid")

# Create subplots
fig, axs = plt.subplots(2, 2, figsize=(10, 8))

# Plot histograms
sns.histplot(data=df, x="ApplicantIncome", kde=True, ax=axs[0, 0], color='green')
sns.histplot(data=df, x="CoapplicantIncome", kde=True, ax=axs[0, 1], color='skyblue')
sns.histplot(data=df, x="LoanAmount", kde=True, ax=axs[1, 0], color='orange')

# Display the plot
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Set the style
sns.set(style="darkgrid")

# Create subplots
fig, axs = plt.subplots(2, 2, figsize=(10, 10))

# Plot violin plots
sns.violinplot(data=df, y="ApplicantIncome", ax=axs[0, 0], color='green')
sns.violinplot(data=df, y="CoapplicantIncome", ax=axs[0, 1], color='skyblue')
sns.violinplot(data=df, y="LoanAmount", ax=axs[1, 0], color='orange')

# Remove the empty subplot
fig.delaxes(axs[1, 1])

# Display the plot
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the box plot
sns.boxplot(x="Loan_Status", y="ApplicantIncome", data=df, palette="mako")

# Add title and labels
plt.title("Distribution of Applicant Income by Loan Status")
plt.xlabel("Loan Status")
plt.ylabel("Applicant Income")

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the box plot
sns.boxplot(x="Loan_Status", y="CoapplicantIncome", data=df, palette="rocket")

# Add title and labels
plt.title("Distribution of Coapplicant Income by Loan Status")
plt.xlabel("Loan Status")
plt.ylabel("Coapplicant Income")

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create the box plot
sns.boxplot(x="Loan_Status", y="LoanAmount", data=df, palette="YlOrBr")

# Add title and labels
plt.title("Distribution of Loan Amount by Loan Status")
plt.xlabel("Loan Status")
plt.ylabel("Loan Amount")

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Check for missing values and sum them up
missing_values = df.isnull().sum()

# Print the result
print(missing_values)

import matplotlib.pyplot as plt
import missingno as mso
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Create a figure and axes
plt.figure(figsize=(24, 5))
axz = plt.subplot(1, 2, 2)

# Plot the missing values using missingno
mso.bar(df, ax=axz, fontsize=12)

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Drop the 'Loan_ID' column
df = df.drop(['Loan_ID'], axis=1)

import pandas as pd

def fill_missing_with_mode(df, columns):
    for column in columns:
        df[column].fillna(df[column].mode()[0], inplace=True)

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# List of columns to fill missing values with mode
columns_to_fill = ['Gender', 'Married', 'Dependents', 'Self_Employed', 'Credit_History', 'Loan_Amount_Term']

# Fill missing values with mode
fill_missing_with_mode(df, columns_to_fill)

import pandas as pd

def fill_missing_with_mean(df, column):
    df[column].fillna(df[column].mean(), inplace=True)

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Fill missing values in 'LoanAmount' with mean
fill_missing_with_mean(df, 'LoanAmount')

import pandas as pd

def preprocess_data(df):
    # Perform one-hot encoding
    df = pd.get_dummies(df)

    # Drop redundant columns
    df = df.drop(['Gender_Female', 'Married_No', 'Education_Not Graduate',
                  'Self_Employed_No', 'Loan_Status_N'], axis=1)

    # Rename columns
    new_columns = {
        'Gender_Male': 'Gender',
        'Married_Yes': 'Married',
        'Education_Graduate': 'Education',
        'Self_Employed_Yes': 'Self_Employed',
        'Loan_Status_Y': 'Loan_Status'
    }
    df.rename(columns=new_columns, inplace=True)

    return df

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Preprocess the data
df = preprocess_data(df)

import pandas as pd
import numpy as np

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Perform square root transformation
df['ApplicantIncome'] = np.sqrt(df['ApplicantIncome'])
df['CoapplicantIncome'] = np.sqrt(df['CoapplicantIncome'])
df['LoanAmount'] = np.sqrt(df['LoanAmount'])

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Set the style for the plots
sns.set(style="darkgrid")

# Create subplots
fig, axs = plt.subplots(2, 2, figsize=(10, 8))

# Plot histograms
sns.histplot(data=df, x="ApplicantIncome", kde=True, ax=axs[0, 0], color='green')
sns.histplot(data=df, x="CoapplicantIncome", kde=True, ax=axs[0, 1], color='skyblue')
sns.histplot(data=df, x="LoanAmount", kde=True, ax=axs[1, 0], color='orange')

# Show the plots
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Separate features (X) and target variable (y)
X = df.drop(["Loan_Status"], axis=1)
y = df["Loan_Status"]

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/loan_data_set.csv")

# Set the seaborn theme
sns.set_theme(style="darkgrid")

# Plot the countplot
plt.figure(figsize=(8, 6))
sns.countplot(y="Loan_Status", data=df, palette="coolwarm")
plt.xlabel('Total')
plt.ylabel('Loan Status')
plt.title('Count of Loan Status')
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Display the DataFrame
print(df)

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Display information about the DataFrame
print(df.info())

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Display the counts of unique values in the "Drug" column
print(df['Drug'].value_counts())

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Display the counts of unique values in the "Sex" column
print(df['Sex'].value_counts())

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Display the counts of unique values in the "BP" column
print(df['BP'].value_counts())

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Display the counts of unique values in the "Cholesterol" column
print(df['Cholesterol'].value_counts())

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Display the summary statistics of the DataFrame
print(df.describe())

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Set the seaborn theme and create the countplot
sns.set_theme(style="darkgrid")
sns.countplot(y="Drug", data=df, palette="flare")
plt.ylabel('Drug Type')
plt.xlabel('Total')

# Display the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Set the seaborn theme and create the countplot
sns.set_theme(style="darkgrid")
sns.countplot(x="Sex", data=df, palette="rocket")
plt.xlabel('Gender (F=Female, M=Male)')
plt.ylabel('Total')

# Display the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Set the seaborn theme and create the countplot
sns.set_theme(style="darkgrid")
sns.countplot(y="BP", data=df, palette="crest")
plt.ylabel('Blood Pressure')
plt.xlabel('Total')

# Display the plot
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Set the seaborn theme and create the countplot
sns.set_theme(style="darkgrid")
sns.countplot(x="Cholesterol", data=df, palette="magma")
plt.xlabel('Cholesterol')
plt.ylabel('Total')

# Display the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Create a cross-tabulation of 'Sex' and 'Drug' columns
cross_tab = pd.crosstab(df['Sex'], df['Drug'])

# Plot the cross-tabulation
cross_tab.plot(kind="bar", figsize=(12, 5))

# Add title and labels
plt.title('Gender distribution based on Drug type')
plt.xlabel('Gender')
plt.ylabel('Frequency')
plt.xticks(rotation=0)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Create a cross-tabulation of 'BP' and 'Cholesterol' columns
cross_tab = pd.crosstab(df['BP'], df['Cholesterol'])

# Plot the cross-tabulation
cross_tab.plot(kind="bar", figsize=(15, 6))

# Add title and labels
plt.title('Blood Pressure distribution based on Cholesterol')
plt.xlabel('Blood Pressure')
plt.ylabel('Frequency')
plt.xticks(rotation=0)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Create scatter plot for females
plt.scatter(x=df.Age[df.Sex=='F'], y=df.Na_to_K[df.Sex=='F'], c="green")

# Create scatter plot for males
plt.scatter(x=df.Age[df.Sex=='M'], y=df.Na_to_K[df.Sex=='M'], c="yellow")

# Add legend
plt.legend(["Female", "Male"])

# Add labels and title
plt.xlabel("Age")
plt.ylabel("Na_to_K")
plt.title("Scatter plot of Age vs Na_to_K by Gender")

# Show the plot
plt.show()

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Define the bin edges and category labels
bin_age = [0, 19, 29, 39, 49, 59, 69, 80]
category_age = ['<20s', '20s', '30s', '40s', '50s', '60s', '>60s']

# Bin the 'Age' column and create a new column 'Age_binned'
df['Age_binned'] = pd.cut(df['Age'], bins=bin_age, labels=category_age)

# Drop the original 'Age' column
df = df.drop(['Age'], axis=1)

# Display the modified DataFrame
print(df.head())

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Define the bin edges and category labels
NatoK = [0, 9, 19, 29, 50]
category_NatoK = ['<10', '10-20', '20-30', '>30']

# Bin the 'Na_to_K' column and create a new column 'Na_to_K_binned'
df['Na_to_K_binned'] = pd.cut(df['Na_to_K'], bins=NatoK, labels=category_NatoK)

# Drop the original 'Na_to_K' column
df = df.drop(['Na_to_K'], axis=1)

# Display the modified DataFrame
print(df.head())

from sklearn.model_selection import train_test_split
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/drug200.csv")

# Split the dataset into features (X) and target variable (y)
X = df.drop(["Drug"], axis=1)
y = df["Drug"]

# Split the dataset into training and testing sets (70% train, 30% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# Display the shapes of the training and testing sets
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

import pandas as pd

# Convert categorical variables into dummy variables using one-hot encoding
X_train = pd.get_dummies(X_train)
X_test = pd.get_dummies(X_test)

# Display the first few rows of the transformed training set
print("Transformed X_train:")
print(X_train.head())

# Display the first few rows of the transformed testing set
print("\nTransformed X_test:")
print(X_test.head())

import seaborn as sns
import matplotlib.pyplot as plt

# Set the theme for Seaborn plots
sns.set_theme(style="darkgrid")

# Create a count plot for the target variable y_train
sns.countplot(y=y_train, palette="mako_r")

# Set labels for the plot
plt.ylabel('Drug Type')
plt.xlabel('Total')

# Display the plot
plt.show()

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Create the Logistic Regression model
model = LogisticRegression(solver='liblinear', max_iter=5000)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Print the classification report
print(classification_report(y_test, y_pred))

# Print the confusion matrix
print(confusion_matrix(y_test, y_pred))

# Calculate and print the accuracy score
LRAcc = accuracy_score(y_pred, y_test)
print('Logistic Regression accuracy is: {:.2f}%'.format(LRAcc * 100))

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Create the K Nearest Neighbors classifier with 20 neighbors
model = KNeighborsClassifier(n_neighbors=20)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Print the classification report
print(classification_report(y_test, y_pred))

# Print the confusion matrix
print(confusion_matrix(y_test, y_pred))

# Calculate and print the accuracy score
KNAcc = accuracy_score(y_pred, y_test)
print('K Nearest Neighbors accuracy is: {:.2f}%'.format(KNAcc * 100))

from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Create the SVC classifier with a linear kernel
model = SVC(kernel='linear', max_iter=251)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Print the classification report
print(classification_report(y_test, y_pred))

# Print the confusion matrix
print(confusion_matrix(y_test, y_pred))

# Calculate and print the accuracy score
SVCAcc = accuracy_score(y_pred, y_test)
print('Support Vector Classification (SVC) accuracy is: {:.2f}%'.format(SVCAcc * 100))

from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Create the Categorical Naive Bayes classifier
model = CategoricalNB()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Print the classification report
print(classification_report(y_test, y_pred))

# Print the confusion matrix
print(confusion_matrix(y_test, y_pred))

# Calculate and print the accuracy score
NBAcc = accuracy_score(y_pred, y_test)
print('Categorical Naive Bayes accuracy is: {:.2f}%'.format(NBAcc * 100))

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Create the Decision Tree classifier with max_leaf_nodes=20
model = DecisionTreeClassifier(max_leaf_nodes=20)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Print the classification report
print(classification_report(y_test, y_pred))

# Print the confusion matrix
print(confusion_matrix(y_test, y_pred))

# Calculate and print the accuracy score
DTAcc = accuracy_score(y_pred, y_test)
print('Decision Tree accuracy is: {:.2f}%'.format(DTAcc * 100))

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Create the Random Forest classifier with max_leaf_nodes=30
model = RandomForestClassifier(max_leaf_nodes=30)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Print the classification report
print(classification_report(y_test, y_pred))

# Print the confusion matrix
print(confusion_matrix(y_test, y_pred))

# Calculate and print the accuracy score
RFAcc = accuracy_score(y_pred, y_test)
print('Random Forest accuracy is: {:.2f}%'.format(RFAcc * 100))

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Display the DataFrame
print(df.head())

import pandas as pd

# Load the data from the CSV file
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Display the summary statistics of the DataFrame
print(df.describe())

import pandas as pd

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Display DataFrame information
print(df.info())

import pandas as pd

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Display the shape of the DataFrame
print("Shape of the DataFrame:", df.shape)

import pandas as pd

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Display value counts for each column
for column in df.columns:
    print("\nValue counts for column:", column)
    print(df[column].value_counts())

import pandas as pd

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Display column names
print(df.columns)

import pandas as pd

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Count missing values in each column
missing_values = df.isnull().sum()

print(missing_values)

import pandas as pd

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Calculate the correlation matrix
correlation_matrix = df.corr()

print(correlation_matrix)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Create a correlation matrix
correlation_matrix = df.corr()

# Plot the heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Plot histograms
plt.figure(figsize=(18, 12))
df.hist()
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Define features for boxplots
features = ['Glucose', 'BloodPressure', 'Insulin', 'BMI', 'Age', 'SkinThickness']

# Create boxplots
plt.figure(figsize=(14, 10))
for i, feature in enumerate(features, start=1):
    plt.subplot(2, 3, i)
    sns.boxplot(x=feature, data=df)

plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns

# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/CSV Files/diabetes.csv")

# Define columns for pairplot
mean_col = ['Glucose', 'BloodPressure', 'Insulin', 'Age', 'Outcome', 'BMI']

# Create pairplot
sns.pairplot(df[mean_col], palette='dark')

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Create the boxplot
sns.boxplot(x='Outcome', y='Insulin', data=df)

# Set plot title
plt.title('Boxplot of Insulin Level by Outcome')

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Create the regression plot
sns.regplot(x='BMI', y='Glucose', data=df)

# Set plot title
plt.title('Regression Plot of Glucose vs BMI')

# Show the plot
plt.show()

import seaborn as sns

# Create the relational plot
sns.relplot(x='BMI', y='Glucose', data=df, kind='scatter')

# Set plot title
plt.title('Relation Plot of Glucose vs BMI')

# Show the plot
plt.show()

import seaborn as sns

# Create the scatter plot
sns.scatterplot(x='Glucose', y='Insulin', data=df)

# Set plot title
plt.title('Scatter Plot of Insulin vs Glucose')

# Show the plot
plt.show()

import seaborn as sns

# Create the joint plot
sns.jointplot(x='SkinThickness', y='Insulin', data=df)

# Set plot title
plt.title('Joint Plot of Insulin vs Skin Thickness')

# Show the plot
plt.show()

import seaborn as sns

# Create pair plot with hue='Outcome'
sns.pairplot(df, hue='Outcome', palette='husl')

# Show the plot
plt.show()

import seaborn as sns

# Create a line plot
sns.lineplot(x='Glucose', y='Insulin', data=df)

# Show the plot
plt.show()

import seaborn as sns

# Create swarm plot
sns.swarmplot(x='Glucose', y='Insulin', data=df)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Create bar plot
sns.barplot(x="SkinThickness", y="Insulin", data=df[150:180])

# Add title and labels
plt.title("SkinThickness vs Insulin", fontsize=15)
plt.xlabel("SkinThickness")
plt.ylabel("Insulin")

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(5, 5))
sns.barplot(x="Glucose", y="Insulin", data=df[120:130])
plt.title("Glucose vs Insulin", fontsize=15)
plt.xlabel("Glucose")
plt.ylabel("Insulin")
plt.show()

from sklearn.model_selection import train_test_split

# Separate features (X) and target variable (y)
X = df.drop(columns='Outcome')
y = df['Outcome']

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Initialize the Logistic Regression model
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

# Calculate accuracy
LRAcc = accuracy_score(y_pred, y_test)
print('Logistic Regression accuracy is: {:.2f}%'.format(LRAcc * 100))

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Initialize the KNeighborsClassifier model
model = KNeighborsClassifier(n_neighbors=7)

# Train the model
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

# Calculate accuracy
KNAcc = accuracy_score(y_pred, y_test)
print('KNeighborsClassifier accuracy is: {:.2f}%'.format(KNAcc * 100))

from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Initialize the SVC model
model = SVC()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

# Calculate accuracy
SVCAcc = accuracy_score(y_pred, y_test)
print('SVC accuracy is: {:.2f}%'.format(SVCAcc * 100))

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Initialize the Random Forest Classifier model
model = RandomForestClassifier()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

# Calculate accuracy
RFAcc = accuracy_score(y_pred, y_test)
print('Random Forest Classifier accuracy is: {:.2f}%'.format(RFAcc * 100))

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Create and train the Gradient Boosting Classifier model
model = GradientBoostingClassifier()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

# Calculate accuracy
GBCAcc = accuracy_score(y_pred, y_test)
print('Gradient Boosting Classifier accuracy is: {:.2f}%'.format(GBCAcc * 100))

from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Create and train the Gaussian Naive Bayes model
model = GaussianNB()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))

# Calculate accuracy
GNBAcc = accuracy_score(y_pred, y_test)
print('Gaussian Naive Bayes accuracy is: {:.2f}%'.format(GNBAcc * 100))

import pandas as pd

# Create the DataFrame
compare = pd.DataFrame({
    'Model': ['Logistic Regression', 'K Neighbors', 'SVM', 'Random Forest', 'GradientBoostingClassifier', 'GaussianNB'],
    'Accuracy': [LRAcc * 100, KNAcc * 100, SVCAcc * 100, RFAcc * 100, GBCAcc * 100, GNBAcc * 100]
})

# Sort the DataFrame by accuracy in descending order
compare = compare.sort_values(by='Accuracy', ascending=False)

# Display the DataFrame
print(compare)

compare.plot(x='Model', y='Accuracy', kind='bar', color='orange')

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Mall_Customers.csv")

# Display the DataFrame
print(df.head())

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Mall_Customers.csv")

null_counts = df.isnull().sum()
print(null_counts)

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Mall_Customers.csv")

description = df.describe()
print(description)

import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Mall_Customers.csv")

columns_to_plot = ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']
sns.pairplot(df[columns_to_plot])
plt.show()

from sklearn import preprocessing
import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Mall_Customers.csv")

# Initialize LabelEncoder
label_encoder = preprocessing.LabelEncoder()

# Encode 'Genre' column
df['Genre'] = label_encoder.fit_transform(df['Genre'])

# Display the first few rows of the DataFrame
print(df.head())

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Mall_Customers.csv")

plt.figure(figsize=(8, 4))
sns.heatmap(df.notnull(), cmap='binary', cbar=False)
plt.title('DataFrame Visualization')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.hierarchy import dendrogram, linkage

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Mall_Customers.csv")


# Compute the distance matrix
linked = linkage(X, method='ward')

# Plot the dendrogram
plt.figure(figsize=(10, 5))
dendrogram(linked, orientation='top', distance_sort='descending', show_leaf_counts=True)
plt.title('Dendrogram for Hierarchical Clustering')
plt.xlabel('Samples')
plt.ylabel('Distance')
plt.show()

import pandas as pd
import numpy as np
from sklearn.cluster import AgglomerativeClustering

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Mall_Customers.csv")

# Initialize and fit AgglomerativeClustering
hc = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')
y_pred = hc.fit_predict(X)

# Display the predicted clusters
print("Predicted clusters:")
print(y_pred)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import AgglomerativeClustering

# Read the CSV file into a DataFrame
df = pd.read_csv("/content/drive/MyDrive/CSV Files/Mall_Customers.csv")

# Initialize and fit AgglomerativeClustering
hc = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')
df['Cluster'] = hc.fit_predict(X)

# Plotting the clusters
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', data=df, hue='Cluster', palette='viridis', s=100)
plt.title('Hierarchical Clustering of Mall Customers')
plt.show()

from sklearn import metrics

# Calculate silhouette score
silhouette = metrics.silhouette_score(X, y_pred)

# Print silhouette score
print(f"Silhouette Score: {silhouette}")

import plotly.graph_objs as go
import plotly.offline as py

# Create a Scatter3d trace
sample = go.Scatter3d(
    x=df['Annual Income (k$)'],
    y=df['Spending Score (1-100)'],
    z=df['Age'],
    mode='markers',
    marker=dict(
        color=df['Cluster'],
        size=10,
        line=dict(color=df['Cluster'], width=12),
        opacity=0.8
    )
)

# Define the data and layout
data_plotly = [sample]
layout = go.Layout(
    title='Clusters using Agglomerative Clustering',
    scene=dict(
        xaxis=dict(title='Annual Income (k$)'),
        yaxis=dict(title='Spending Score (1-100)'),
        zaxis=dict(title='Age')
    )
)

# Create the figure
fig = go.Figure(data=data_plotly, layout=layout)

# Display the plot
py.iplot(fig)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Display the first few rows of the DataFrame
print(df.head())

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Drop the 'Date_of_Journey' column from the DataFrame
df.drop('Date_of_Journey', axis=1, inplace=True)

# Display the modified DataFrame
print(df.head())

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Check for missing values in each column
missing_values = df.isnull().sum()

# Display the number of missing values in each column
print(missing_values)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Drop rows with missing values
df.dropna(inplace=True)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Displaying column names
print(df.columns)

import pandas as pd

# Reading the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Checking for null values
null_values = df.isnull().any()

# Displaying the result
print(null_values)

import pandas as pd

# Reading the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Splitting the 'Dep_Time' column into 'Dep_Hour' and 'Dep_Min' columns
df[['Dep_Hour', 'Dep_Min']] = df['Dep_Time'].str.split(':', expand=True)

# Displaying the first few rows of the DataFrame
print(df.head())

import pandas as pd

# Reading the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Splitting the 'Dep_Time' column into 'Dep_Hour' and 'Dep_Min' columns
df[['Dep_Hour', 'Dep_Min']] = df['Dep_Time'].str.split(':', expand=True)

# Dropping 'Dep_Time' column
df.drop('Dep_Time', axis=1, inplace=True)

# Displaying updated DataFrame
print(df.head())

import pandas as pd

# Reading the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Converting 'Arrival_Time' to datetime and extracting hour and minute
df['Arrival_Hour'] = pd.to_datetime(df['Arrival_Time']).dt.hour
df['Arrival_min'] = pd.to_datetime(df['Arrival_Time']).dt.minute

# Displaying updated DataFrame
print(df)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Dropping 'Arrival_Time' column
df.drop('Arrival_Time', axis=1, inplace=True)

# Displaying updated DataFrame
print(df.head())

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Extracting 'Duration' column into a list
duration = list(df['Duration'])

# Displaying the list
print("Duration list:", duration)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")


# Parsing duration into hours and minutes
duration_hours = [int(x.split('h')[0].strip()) if 'h' in x else 0 for x in df['Duration']]
duration_mins = [int(x.split('m')[0].split()[-1].strip()) if 'm' in x else 0 for x in df['Duration']]

# Displaying parsed data
print("Duration in hours:", duration_hours)
print("Duration in minutes:", duration_mins)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Parsing duration into hours and minutes
duration_hours = [int(x.split('h')[0].strip()) if 'h' in x else 0 for x in df['Duration']]
duration_mins = [int(x.split('m')[0].split()[-1].strip()) if 'm' in x else 0 for x in df['Duration']]

# Adding new columns to DataFrame
df['Duration_hours'] = duration_hours
df['Duration_mins'] = duration_mins

# Displaying updated DataFrame
print(df.head())

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Parsing duration into hours and minutes
duration_hours = [int(x.split('h')[0].strip()) if 'h' in x else 0 for x in df['Duration']]
duration_mins = [int(x.split('m')[0].split()[-1].strip()) if 'm' in x else 0 for x in df['Duration']]

# Adding new columns to DataFrame
df['Duration_hours'] = duration_hours
df['Duration_mins'] = duration_mins

# Dropping 'Duration' column
df.drop('Duration', axis=1, inplace=True)

# Displaying updated DataFrame
print(df.head())

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Counting unique values in 'Airline' column
airline_counts = df['Airline'].value_counts()

# Displaying the counts
print(airline_counts)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Extracting 'Airline' column
Airline = df[['Airline']]

# Creating dummy variables and dropping the first dummy
Airline = pd.get_dummies(Airline, drop_first=True)

# Displaying the transformed DataFrame
print(Airline)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Counting unique values in 'Source' column
source_counts = df['Source'].value_counts()

# Displaying the counts
print(source_counts)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Extracting 'Source' column
Source = df[['Source']]

# Creating dummy variables and dropping the first dummy
Source = pd.get_dummies(Source, drop_first=True)

# Displaying the transformed DataFrame
print(Source.head())

import pandas as pd


# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Extracting 'Destination' column
Destination = df[['Destination']]

# Creating dummy variables and dropping the first dummy
Destination = pd.get_dummies(Destination, drop_first=True)

# Displaying the transformed DataFrame
print(Destination.head())

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Dropping 'Route' and 'Additional_Info' columns
df.drop(['Route', 'Additional_Info'], axis=1, inplace=True)

# Displaying updated DataFrame
print(df.head())

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Counting unique values in 'Total_Stops' column
total_stops_counts = df['Total_Stops'].value_counts()

# Displaying the counts
print(total_stops_counts)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Replacing categorical values with numerical values
df.replace({'non-stop': 0, '1 stop': 1, '2 stops': 2, '3 stops': 3, '4 stops': 4}, inplace=True)

# Displaying updated DataFrame
print(df)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Parsing duration into hours and minutes
duration_hours = [int(x.split('h')[0].strip()) if 'h' in x else 0 for x in df['Duration']]
duration_mins = [int(x.split('m')[0].split()[-1].strip()) if 'm' in x else 0 for x in df['Duration']]

# Displaying the first few rows of the DataFrame
print(df.head())

import pandas as pd


# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Concatenating DataFrames along columns
df_final = pd.concat([df, Airline, Source, Destination], axis=1)

# Displaying the first few rows of the concatenated DataFrame
print(df_final.head())

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Concatenating DataFrames along columns
df_final = pd.concat([df, Airline, Source, Destination], axis=1)

# Getting the shape of the DataFrame
shape = df_final.shape

# Displaying the shape
print("Shape of df_final:", shape)

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Concatenating DataFrames along columns
df_final = pd.concat([df, Airline, Source, Destination], axis=1)

# Dropping 'Airline', 'Source', and 'Destination' columns
df_final.drop(['Airline', 'Source', 'Destination'], axis=1, inplace=True)

# Displaying the first few rows of the updated DataFrame
print(df_final.head())

import pandas as pd

# Read the Excel file into a DataFrame
df = pd.read_excel("/content/drive/MyDrive/CSV Files/Data_Train.xlsx")

# Creating feature matrix X by dropping the 'Price' column
X = df_final.drop('Price', axis=1)

# Creating target vector y containing only the 'Price' column
y = df_final['Price']

# Displaying X and y
print("Feature matrix X:")
print(X)
print("\nTarget vector y:")
print(y)